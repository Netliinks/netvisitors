//
//  NotesView.ts
//
//  Generated by Poll Castillo on 09/03/2023.
//
import { Config } from "../../../Configs.js";
import { getEntityData, getUserInfo, getFile, getFilterEntityData, getFilterEntityCount } from "../../../endpoints.js";
import { CloseDialog, renderRightSidebar, drawTagsIntoTables, filterDataByHeaderType, inputObserver, pageNumbers, fillBtnPagination, calculateLine } from "../../../tools.js";
import { UIContentLayout, UIRightSidebar } from "./Layout.js";
import { UITableSkeletonTemplate } from "./Template.js";
import { exportRoutineDetailCsv, exportRoutineDetailPdf, exportRoutineDetailXls } from "../../../exportFiles/routines_details.js";
// Local configs
const tableRows = Config.tableRows;
let currentPage = Config.currentPage;
const pageName = 'Registros de Rutinas';
const customerId = localStorage.getItem('customer_id');
let infoPage = {
    count: 0,
    offset: Config.offset,
    currentPage: currentPage,
    search: "",
    counter: 10,
    table: "RoutineRegister",
    newRegister: false,
    countNewRegister: 0,
    statusSearch: "Todos"
};
let dataPage;
let raw;
const currentBusiness = async () => {
    const currentUser = await getUserInfo();
    const business = await getEntityData('User', `${currentUser.attributes.id}`);
    return business;
};
const GetRoutinesDetails = async () => {
    //const notesRaw = await getEntitiesData('RoutineRegister');
    //const notes = notesRaw.filter((data) => data.customer?.id === `${customerId}`);
    infoPage.counter = 10;
    // @ts-ignore
    clearTimeout(Config.timeOut);
    let status = false;
    let condition = '<>';
    if (infoPage.statusSearch == 'Marcadas') {
        status = true;
    }
    else if (infoPage.statusSearch == 'NoMarcadas') {
        status = true;
        condition = '=';
    }
    raw = JSON.stringify({
        "filter": {
            "conditions": [
                {
                    "property": "customer.id",
                    "operator": "=",
                    "value": `${customerId}`
                },
                {
                    "property": "routineState.name",
                    "operator": `${condition}`,
                    "value": `${status ? 'No cumplido' : ""}`
                }
            ],
        },
        sort: "-createdDate",
        limit: Config.tableRows,
        offset: infoPage.offset,
        fetchPlan: 'full',
    });
    if (infoPage.search != "") {
        raw = JSON.stringify({
            "filter": {
                "conditions": [
                    {
                        "group": "OR",
                        "conditions": [
                            {
                                "property": "user.username",
                                "operator": "contains",
                                "value": `${infoPage.search.toLowerCase()}`
                            },
                            {
                                "property": "user.firstName",
                                "operator": "contains",
                                "value": `${infoPage.search.toLowerCase()}`
                            },
                            {
                                "property": "user.lastName",
                                "operator": "contains",
                                "value": `${infoPage.search.toLowerCase()}`
                            },
                            {
                                "property": "routine.name",
                                "operator": "contains",
                                "value": `${infoPage.search.toLowerCase()}`
                            },
                            {
                                "property": "routineSchedule.name",
                                "operator": "contains",
                                "value": `${infoPage.search.toLowerCase()}`
                            }
                        ]
                    },
                    {
                        "property": "customer.id",
                        "operator": "=",
                        "value": `${customerId}`
                    },
                    {
                        "property": "routineState.name",
                        "operator": `${condition}`,
                        "value": `${status ? 'No cumplido' : ""}`
                    }
                ]
            },
            sort: "-createdDate",
            limit: Config.tableRows,
            offset: infoPage.offset,
            fetchPlan: 'full',
        });
    }
    infoPage.count = await getFilterEntityCount("RoutineRegister", raw);
    dataPage = await getFilterEntityData("RoutineRegister", raw);
    return dataPage;
};
export class RoutineRegisters {
    constructor() {
        this.dialogContainer = document.getElementById('app-dialogs');
        this.siebarDialogContainer = document.getElementById('entity-editor-container');
        this.appContainer = document.getElementById('datatable-container');
        this.closeRightSidebar = () => {
            const closeButton = document.getElementById('close');
            const editor = document.getElementById('entity-editor-container');
            closeButton.addEventListener('click', () => {
                new CloseDialog().x(editor);
            });
        };
        this.zoom = (register) => {
            const picture = document.getElementById('register-picture');
            const close = document.getElementById("close-modalZoom");
            const modalZoom = document.getElementById('modalZoom');
            picture.addEventListener('click', () => {
                //this.dialogContainer.style.display = 'block'
                //this.dialogContainer.innerHTML = modalZoomImage
                const editor = document.getElementById('entity-editor-container');
                editor.style.display = 'none';
                const img01 = document.getElementById('img01');
                const caption = document.getElementById('caption');
                modalZoom.style.display = 'block';
                img01.src = picture.src;
                caption.innerHTML = `Imagen`;
            });
            close.addEventListener('click', () => {
                modalZoom.style.display = 'none';
                const editor = document.getElementById('entity-editor-container');
                editor.style.display = 'flex';
            });
        };
        this.export = () => {
            const exportNotes = document.getElementById('export-entities');
            exportNotes.addEventListener('click', async () => {
                this.siebarDialogContainer.innerHTML = '';
                this.siebarDialogContainer.style.display = 'flex';
                this.siebarDialogContainer.innerHTML = `
                        <div class="entity_editor" id="entity-editor">
                        <div class="entity_editor_header">
                            <div class="user_info">
                            <div class="avatar"><i class="fa-regular fa-file-export"></i></div>
                            <h1 class="entity_editor_title">Exportar<br><small>Datos</small></h1>
                            </div>

                            <button class="btn btn_close_editor" id="close"><i class="fa-solid fa-x"></i></button>
                        </div>

                        <!-- EDITOR BODY -->
                        <div class="entity_editor_body">
                            <div class="material_input">
                                <label for="status-export">Estados de rutina</label>
                                <br>
                                <br>
                                <select name="status-export" id="status-export">
                                    <option value="Todos" selected>Todos</option>
                                    <option value="Marcadas">Marcadas</option>
                                    <option value="NoMarcadas">No Marcadas</option>
                                </select>
                            </div>
                            <br>
                            <br>
                            <br>
                            <div class="form_group">
                                <div class="form_input">
                                    <label class="form_label" for="start-date">Desde:</label>
                                    <input type="date" class="input_date input_date-start" id="start-date" name="start-date">
                                </div>
                
                                <div class="form_input">
                                    <label class="form_label" for="end-date">Hasta:</label>
                                    <input type="date" class="input_date input_date-end" id="end-date" name="end-date">
                                </div>

                            </div>

                            <div class="input_checkbox">
                                <label for="exportCsv">
                                    <input type="radio" class="checkbox" id="exportCsv" name="exportOption" value="csv" /> CSV
                                </label>
                            </div>

                            <div class="input_checkbox">
                                <label for="exportXls">
                                    <input type="radio" class="checkbox" id="exportXls" name="exportOption" value="xls" checked /> XLS
                                </label>
                            </div>

                            <div class="input_checkbox">
                                <label for="exportPdf">
                                    <input type="radio" class="checkbox" id="exportPdf" name="exportOption" value="pdf" /> PDF
                                </label>
                            </div>

                        </div>
                        <!-- END EDITOR BODY -->

                        <div class="entity_editor_footer">
                            <button class="btn btn_primary btn_widder" id="export-data">Listo</button>
                        </div>
                        </div>
                    `;
                inputObserver();
                let fecha = new Date(); //Fecha actual
                let mes = fecha.getMonth() + 1; //obteniendo mes
                let dia = fecha.getDate(); //obteniendo dia
                let anio = fecha.getFullYear(); //obteniendo año
                if (dia < 10)
                    dia = '0' + dia; //agrega cero si el menor de 10
                if (mes < 10)
                    mes = '0' + mes; //agrega cero si el menor de 10
                // @ts-ignore
                document.getElementById("start-date").value = anio + "-" + mes + "-" + dia;
                // @ts-ignore
                document.getElementById("end-date").value = anio + "-" + mes + "-" + dia;
                const _closeButton = document.getElementById('close');
                const exportButton = document.getElementById('export-data');
                const statusExport = document.getElementById('status-export');
                let onPressed = false;
                exportButton.addEventListener('click', async () => {
                    if (!onPressed) {
                        onPressed = true;
                        this.dialogContainer.style.display = 'block';
                        this.dialogContainer.innerHTML = `
                            <div class="dialog_content" id="dialog-content">
                                <div class="dialog">
                                    <div class="dialog_container padding_8">
                                        <div class="dialog_header">
                                            <h2>Exportando...</h2>
                                        </div>
    
                                        <div class="dialog_message padding_8">
                                            <div class="material_input">
                                                <input type="text" id="export-total" class="input_filled" value="..." readonly>
                                                <label for="export-total"><i class="fa-solid fa-cloud-arrow-down"></i>Obteniendo datos</label>
                                            </div>
    
                                            <div class="input_detail">
                                                <label for="message-export"><i class="fa-solid fa-file-export"></i></label>
                                                <p id="message-export" class="input_filled" readonly></p>
                                            </div>
                                        </div>
    
                                        <div class="dialog_footer">
                                            <button class="btn btn_primary" id="cancel">Cancelar</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            `;
                        inputObserver();
                        let status = false;
                        let conditionStatus = '<>';
                        if (statusExport.value == 'Marcadas') {
                            status = true;
                        }
                        else if (statusExport.value == 'NoMarcadas') {
                            status = true;
                            conditionStatus = '=';
                        }
                        const message1 = document.getElementById("export-total");
                        const message2 = document.getElementById("message-export");
                        const _closeButton = document.getElementById('cancel');
                        _closeButton.onclick = () => {
                            onPressed = false;
                            const _dialog = document.getElementById('dialog-content');
                            new CloseDialog().x(_dialog);
                        };
                        const _values = {
                            start: document.getElementById('start-date'),
                            end: document.getElementById('end-date'),
                            exportOption: document.getElementsByName('exportOption')
                        };
                        //console.log(_values.start.value)
                        //console.log(_values.end.value)
                        //const headers = ['Título', 'Contenido', 'Autor', 'Fecha', 'Hora']
                        let rawToExport = (offset) => {
                            let rawExport = JSON.stringify({
                                "filter": {
                                    "conditions": [
                                        {
                                            "property": `customer.id`,
                                            "operator": "=",
                                            "value": `${customerId}`
                                        },
                                        {
                                            "property": "creationDate",
                                            "operator": ">=",
                                            "value": `${_values.start.value}`
                                        },
                                        {
                                            "property": "creationDate",
                                            "operator": "<=",
                                            "value": `${_values.end.value}`
                                        },
                                        {
                                            "property": "routineState.name",
                                            "operator": `${conditionStatus}`,
                                            "value": `${status ? 'No cumplido' : ""}`
                                        }
                                    ],
                                },
                                sort: `-createdDate`,
                                limit: Config.limitExport,
                                offset: offset,
                                fetchPlan: 'full',
                            });
                            return rawExport;
                        };
                        let rawExport = rawToExport(0);
                        const totalRegisters = await getFilterEntityCount("RoutineRegister", rawExport);
                        if (totalRegisters === undefined) {
                            onPressed = false;
                            const _dialog = document.getElementById('dialog-content');
                            new CloseDialog().x(_dialog);
                            alert("Ocurrió un error al exportar");
                        }
                        else if (totalRegisters === 0) {
                            onPressed = false;
                            const _dialog = document.getElementById('dialog-content');
                            new CloseDialog().x(_dialog);
                            alert("No hay ningún registro");
                        }
                        else {
                            message1.value = `0 / ${totalRegisters}`;
                            const pages = Math.ceil(totalRegisters / Config.limitExport);
                            let array = [];
                            let registers = [];
                            let offset = 0;
                            for (let i = 0; i < pages; i++) {
                                if (onPressed) {
                                    rawExport = rawToExport(offset);
                                    array[i] = await getFilterEntityData("RoutineRegister", rawExport); //await getEvents();
                                    for (let y = 0; y < array[i].length; y++) {
                                        registers.push(array[i][y]);
                                    }
                                    message1.value = `${registers.length} / ${totalRegisters}`;
                                    offset = Config.limitExport + (offset);
                                }
                            }
                            for (let i = 0; i < _values.exportOption.length; i++) {
                                let ele = _values.exportOption[i];
                                if (ele.type = "radio") {
                                    if (ele.checked) {
                                        message2.innerText = `Generando archivo ${ele.value},\nesto puede tomar un momento.`;
                                        if (ele.value == "xls") {
                                            // @ts-ignore
                                            await exportRoutineDetailXls(registers, _values.start.value, _values.end.value);
                                        }
                                        else if (ele.value == "csv") {
                                            // @ts-ignore
                                            await exportRoutineDetailCsv(registers, _values.start.value, _values.end.value);
                                        }
                                        else if (ele.value == "pdf") {
                                            let rows = [];
                                            for (let i = 0; i < registers.length; i++) {
                                                let register = registers[i];
                                                // @ts-ignore
                                                //if (noteCreationDate >= _values.start.value && noteCreationDate <= _values.end.value) {
                                                let image = '';
                                                if (register.attachment !== undefined) {
                                                    image = await getFile(register.attachment);
                                                }
                                                let obj = {
                                                    "rutina": `${register?.routine?.name.split("\n").join(". ").replace(/[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2580-\u27BF]|\uD83E[\uDD10-\uDDFF]/g, '').trim()}`,
                                                    "ubicacion": `${register?.routineSchedule?.name.split("\n").join(". ").replace(/[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2580-\u27BF]|\uD83E[\uDD10-\uDDFF]/g, '').trim()}`,
                                                    "fecha": `${register.creationDate}`,
                                                    "hora": `${register.creationTime}`,
                                                    "estado": `${register?.routineState?.name ?? ''}`,
                                                    "cords": `${register?.cords ?? ''}`,
                                                    "usuario": `${register.user?.firstName ?? ''} ${register.user?.lastName ?? ''}`,
                                                    "observacion": `${register?.observation?.split("\n").join(". ").replace(/[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2580-\u27BF]|\uD83E[\uDD10-\uDDFF]/g, '').trim() ?? ''}`,
                                                    "imagen": `${image}`
                                                };
                                                rows.push(obj);
                                                //}
                                            }
                                            // @ts-ignore
                                            await exportRoutineDetailPdf(rows, _values.start.value, _values.end.value);
                                        }
                                        const _dialog = document.getElementById('dialog-content');
                                        new CloseDialog().x(_dialog);
                                    }
                                }
                            }
                            onPressed = false;
                        }
                    }
                });
                _closeButton.onclick = () => {
                    onPressed = false;
                    const editor = document.getElementById('entity-editor-container');
                    new CloseDialog().x(editor);
                };
                /*const getFilteredNote = async(_values) =>{
                    const notes = await getEntitiesData('RoutineRegister');
                    const FCustomer = notes.filter(async (data) => {
                        let userCustomer = await getEntityData('User', `${data.user.id}`);
                        userCustomer.customer.id === `${currentUserInfo.customer.id}`
                    });
                    //console.log(`_values.start.value ${_values.start.value}`)
                        const Fdesde = FCustomer.filter((data) => {
                        let noteCreationDateAndTime = data.creationDate.split('T');
                        let noteCreationDate = noteCreationDateAndTime[0];
                        //console.log(`noteCreationDate ${noteCreationDate}`)
                        noteCreationDate >= _values.start.value
                    });/*
                    console.log(`Fdesde ${Fdesde}`)
                    const Fhasta = Fdesde.filter((data) => {
                        let noteCreationDateAndTime = data.creationDate.split('T');
                        let noteCreationDate = noteCreationDateAndTime[0];
                        noteCreationDate <= `${_values.end.value}`
                    });
                    //console.log(Fdesde)
                    return FCustomer;
                }*/
            });
        };
        this.close = () => {
            const closeButton = document.getElementById('close');
            const editor = document.getElementById('entity-editor-container');
            closeButton.addEventListener('click', () => {
                new CloseDialog().x(editor);
            }, false);
        };
    }
    async render(offset, actualPage, search, countNewRegister, statusSearch) {
        infoPage.offset = offset;
        infoPage.currentPage = actualPage;
        infoPage.search = search;
        infoPage.countNewRegister = countNewRegister;
        infoPage.statusSearch = statusSearch;
        this.appContainer.innerHTML = '';
        this.appContainer.innerHTML = UIContentLayout;
        // Getting interface elements
        const viewTitle = document.getElementById('view-title');
        const tableBody = document.getElementById('datatable-body');
        // Changing interface element content
        viewTitle.innerText = pageName;
        tableBody.innerHTML = '.Cargando... Esto puede tomar unos momentos';
        let notesArray = await GetRoutinesDetails();
        if (infoPage.currentPage == 1) {
            const change = async () => {
                // @ts-ignore
                clearTimeout(Config.timeOut);
                if (infoPage.counter == Config.timeReolad) {
                    const newRegisters = await getFilterEntityCount(infoPage.table, raw);
                    //console.log(infoPage.count);
                    //console.log(newRegisters);
                    if (newRegisters > infoPage.count) {
                        console.log("updates detected");
                        infoPage.newRegister = true;
                        infoPage.countNewRegister = newRegisters - infoPage.count;
                        new RoutineRegisters().render(infoPage.offset, infoPage.currentPage, infoPage.search, infoPage.countNewRegister, infoPage.statusSearch);
                    }
                    else {
                        console.log("no updates");
                        // @ts-ignore
                        Config.timeOut = setTimeout(change, infoPage.counter);
                    }
                }
                else if (infoPage.counter == 10) {
                    infoPage.counter = Config.timeReolad;
                    // @ts-ignore
                    Config.timeOut = setTimeout(change, infoPage.counter);
                }
            };
            // @ts-ignore
            Config.timeOut = setTimeout(change, infoPage.counter);
        }
        else {
            // @ts-ignore
            clearTimeout(Config.timeOut);
        }
        tableBody.innerHTML = UITableSkeletonTemplate.repeat(tableRows);
        // Exec functions
        this.load(tableBody, currentPage, notesArray);
        this.searchNotes(tableBody /*, notesArray*/);
        new filterDataByHeaderType().filter();
        this.pagination(notesArray, tableRows, infoPage.currentPage);
        this.export();
        // Rendering icons
    }
    ;
    load(tableBody, currentPage, notes) {
        tableBody.innerHTML = ''; // clean table
        // configuring max table row size
        currentPage--;
        let start = tableRows * currentPage;
        let end = start + tableRows;
        let paginatedItems = notes.slice(start, end);
        // Show message if page is empty
        if (notes.length === 0) {
            let mensaje = 'No existen datos';
            if (customerId == null) {
                mensaje = 'Seleccione una empresa';
            }
            let row = document.createElement('TR');
            row.innerHTML = `
            <td>${mensaje}<td>
            <td></td>
            <td></td>
            `;
            tableBody.appendChild(row);
        }
        else {
            for (let i = 0; i < paginatedItems.length; i++) {
                let register = paginatedItems[i]; // getting note items
                //let obsMessage = await this.obtainDelay(register);
                let row = document.createElement('TR');
                row.innerHTML += `
                    <td>${calculateLine(register?.routine?.name, 40)}</td>
                    <td>${calculateLine(register?.routineSchedule?.name, 40)}</td>
                    <td>${calculateLine(`${register?.user?.firstName ?? ''} ${register?.user?.lastName ?? ''}`, 40)}</td>
                    <td>${register?.user?.username ?? ''}</td>
                    <td class="tag"><span>${register?.routineState?.name ?? ''}</span></td>
                    <td id="table-date">${register?.creationDate ?? ''} ${register?.creationTime ?? ''}</td>
                    <td>${register?.observation == undefined ? 'No' : 'Si'}</td>
                    <td id="td-alert-${register.id}"></td>
                    <td>
                        <button class="button" id="entity-details" data-entityId="${register.id}">
                            <i class="fa-solid fa-magnifying-glass"></i>
                        </button>
                    </td>
                `;
                tableBody.appendChild(row);
                drawTagsIntoTables();
                //this.previewNote(note.id);
                // TODO: Corret this fixer
                // fixDate()
                if (i + 1 <= infoPage.countNewRegister) {
                    if (register?.routineState?.name == 'No cumplido') {
                        let divNewRegister = document.getElementById(`td-alert-${register.id}`);
                        divNewRegister.innerHTML = `
                                <button class="button" id="entity-alert" data-entityId="${register.id}">
                                    <i class="fa-solid fa-circle-exclamation" id="btnAlarm-${register.id}"></i>
                                </button>
                            `;
                        let color = 1;
                        //const audio = new Audio("./public/src/assets/sounds/alarm.mp3");
                        let timeTemp = 1000;
                        let btnAlarm = document.getElementById(`btnAlarm-${register.id}`);
                        let alarmIcon = async () => {
                            //audio.pause();
                            if (color == 1) {
                                btnAlarm.style.color = "red";
                                color = 2;
                            }
                            else {
                                btnAlarm.style.color = "orange";
                                color = 1;
                            }
                            setTimeout(alarmIcon, timeTemp);
                        };
                        setTimeout(alarmIcon, timeTemp);
                        //audio.play();
                        infoPage.newRegister = false;
                    }
                    else {
                        infoPage.newRegister = false;
                    }
                }
            }
        }
        this.previewNote();
    }
    ;
    async searchNotes(tableBody /*, notes: any*/) {
        const search = document.getElementById('search');
        const btnSearch = document.getElementById('btnSearch');
        const statusSearch = document.getElementById('status-search');
        search.value = infoPage.search;
        statusSearch.value = infoPage.statusSearch;
        await search.addEventListener('keyup', () => {
            /*const arrayNotes = notes.filter((note) => `${note.title}
            ${note.content}
            ${note.creationDate}`
                .toLowerCase()
                .includes(search.value.toLowerCase()));
            let filteredNotes = arrayNotes.length;
            let result = arrayNotes;
            if (filteredNotes >= Config.tableRows)
                filteredNotes = Config.tableRows;
            this.load(tableBody, currentPage, result);
            this.pagination(result, tableRows, currentPage);
            // Rendering icons*/
        });
        btnSearch.addEventListener('click', async () => {
            new RoutineRegisters().render(Config.offset, Config.currentPage, search.value.toLowerCase().trim(), 0, statusSearch.value);
        });
    }
    ;
    /*this.obtainDelay = async (register) =>{
        let obsMessage = '';
        //const times = searchUniversalSingle('routineSchedule.id','=',register?.routineSchedule?.id,'RoutineTime');
        //console.log(times);
        return obsMessage;
    }*/
    async previewNote() {
        const openPreview = document.querySelectorAll('#entity-details');
        openPreview.forEach((preview) => {
            let currentNoteId = preview.dataset.entityid;
            preview.addEventListener('click', () => {
                previewBox(currentNoteId);
            });
        });
        const previewBox = async (noteId) => {
            const register = await getEntityData('RoutineRegister', noteId);
            renderRightSidebar(UIRightSidebar);
            const sidebarContainer = document.getElementById('entity-editor-container');
            const closeSidebar = document.getElementById('close');
            closeSidebar.addEventListener('click', () => {
                new CloseDialog().x(sidebarContainer);
            });
            // RoutineRegister details
            const _details = {
                picture: document.getElementById('register-picture-placeholder'),
                content: document.getElementById('register-content'),
                routine: document.getElementById('register-routine'),
                schedule: document.getElementById('register-schedule'),
                locationLat: document.getElementById('register-location-lat'),
                locationLong: document.getElementById('register-location-long'),
                author: document.getElementById('register-author'),
                date: document.getElementById('creation-date'),
                time: document.getElementById('creation-time'),
                status: document.getElementById('target-status'),
                targetDate: document.getElementById('target-date'),
                targeTime: document.getElementById('target-time'),
                targetDate2: document.getElementById('target-date2'),
                targeTime2: document.getElementById('target-time2')
            };
            //const image = await getFile(note.attachment);
            _details.content.innerText = register?.observation ?? '';
            _details.routine.value = register?.routine?.name ?? '';
            _details.schedule.value = register?.routineSchedule?.name ?? '';
            _details.locationLat.value = `Lat: ${register?.latitude ?? ''}`;
            _details.locationLong.value = `Lng: ${register?.longitude ?? ''}`;
            _details.author.value = register?.user?.username ?? '';
            _details.date.value = register?.creationDate ?? '';
            _details.time.value = register?.creationTime ?? '';
            _details.status.value = register?.routineState?.name ?? '';
            _details.targetDate.value = register?.targetDate ?? '';
            _details.targeTime.value = register?.targetTime ?? '';
            _details.targetDate2.value = register?.targetDate2 ?? '';
            _details.targeTime2.value = register?.targetTime2 ?? '';
            if (register.attachment !== undefined) {
                const image = await getFile(register.attachment);
                _details.picture.innerHTML = `
                    <img id="register-picture" width="100%" class="note_picture margin_b_8" src="${image}">
                `;
                this.zoom(register);
            }
        };
    }
    ;
    pagination(items, limitRows, currentPage) {
        const tableBody = document.getElementById('datatable-body');
        const paginationWrapper = document.getElementById('pagination-container');
        paginationWrapper.innerHTML = '';
        let pageCount;
        pageCount = Math.ceil(infoPage.count / limitRows); //items.length
        let button;
        if (pageCount <= Config.maxLimitPage) {
            for (let i = 1; i < pageCount + 1; i++) {
                button = setupButtons(i /*, items, currentPage, tableBody, limitRows*/);
                paginationWrapper.appendChild(button);
            }
            fillBtnPagination(currentPage, Config.colorPagination);
        }
        else {
            pagesOptions(items, currentPage);
        }
        function setupButtons(page /*, items, currentPage, tableBody, limitRows*/) {
            const button = document.createElement('button');
            button.classList.add('pagination_button');
            button.setAttribute("name", "pagination-button");
            button.setAttribute("id", "btnPag" + page);
            button.innerText = page;
            button.addEventListener('click', () => {
                infoPage.offset = Config.tableRows * (page - 1);
                currentPage = page;
                new RoutineRegisters().render(infoPage.offset, currentPage, infoPage.search, 0, infoPage.statusSearch); //new RoutineRegisters().load(tableBody, page, items)
            });
            return button;
        }
        function pagesOptions(items, currentPage) {
            paginationWrapper.innerHTML = '';
            let pages = pageNumbers(pageCount, Config.maxLimitPage, currentPage);
            const prevButton = document.createElement('button');
            prevButton.classList.add('pagination_button');
            prevButton.innerText = "<<";
            paginationWrapper.appendChild(prevButton);
            const nextButton = document.createElement('button');
            nextButton.classList.add('pagination_button');
            nextButton.innerText = ">>";
            for (let i = 0; i < pages.length; i++) {
                if (pages[i] > 0 && pages[i] <= pageCount) {
                    button = setupButtons(pages[i]);
                    paginationWrapper.appendChild(button);
                }
            }
            paginationWrapper.appendChild(nextButton);
            fillBtnPagination(currentPage, Config.colorPagination);
            setupButtonsEvents(prevButton, nextButton);
        }
        function setupButtonsEvents(prevButton, nextButton) {
            prevButton.addEventListener('click', () => {
                new RoutineRegisters().render(Config.offset, Config.currentPage, infoPage.search, 0, infoPage.statusSearch);
            });
            nextButton.addEventListener('click', () => {
                infoPage.offset = Config.tableRows * (pageCount - 1);
                new RoutineRegisters().render(infoPage.offset, pageCount, infoPage.search, 0, infoPage.statusSearch);
            });
        }
    }
    ;
}
